import cv2
import numpy as np
import socket
import threading
import struct
import pickle
s = socket.socket()
s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
Port= 2021
Host=""
print("Socket is successfully created")
s.bind((Host,Port))
print("Socket bind is completed")
s.listen()
print("Socket is listening")
conn,addr=s.accept()
data = b" "
payload_size = struct.calcsize(">L")
while True:
    while len(data) < payload_size:
        print("Recv: {}".format(len(data)))
        data += conn.recv(10)
        
    print("Done Recv: {}".format(len(data)))
    packed_msg_size = data[:payload_size]
    data = data[payload_size:]
    msg_size = struct.unpack(">L", packed_msg_size)[0]
    print("msg_size: {}".format(msg_size))
    
    while len(data) < msg_size:
        data += conn.recv(10)
    frame_data = data[:msg_size]
    data = data[msg_size:]
    frame=pickle.loads(frame_data, fix_imports=True, encoding="bytes")
    frame = cv2.imdecode(frame, cv2.IMREAD_COLOR)
    cv2.imshow('Server',frame)
    if cv2.waitKey(1) & 0xff==ord("q"):
        cv2.destroyAllWindows()
        cam.release()
        s.close()
        break
cam.release()
